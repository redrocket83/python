# "Python Programming: An Introduction to Computer Science"
# by John Zelle, 3rd Ed.
# Chapter 6: Defining Functions
# End-of-Chapter Exercises

# Review Questions

# True/False

# 1. Programmer srarely define their own functions = False
# 2. A function can only be called at once place in a program = False
# 3. Information can be passed into a function through parameters = True
# 4. Every Python function returns some value = True (None is returned when no explicit value is provided)
# 5. In Python, some parameters are passed by reference = False. Page 195. Technically Python passes all parameters by value
# 6. In Python a function can return only one value = False. Page 203
# 7. Python functions can never modify a parameter = False. Page 193/198/199. Parameters are always passed by value. However if the actual parameter is a variable whose 
#    object is a mutable object like a list, then changes to the object will be visible to the other program.
# 8. One reason to use functions is to reduce code duplication = True.
# 9. Variables defined in a function are local to that function = True. Page 203. Formal parameters and other variables inside fucntion definitions are local to that 
#    function
# 10. It's a bad idea to define new functions if it makes a program longer = False. Although some programs look longer it makes it much easier for experienced programmers
      to understand

# Multiple Choice

# 1. The part of a program which uses a function is 
# 
# a) User
# b) Caller *
# c) Callee
# d) Statement

# 2. A python function definition begins with
#
# a) def *
# b) define
# c) function
# d) defun

# 3. A function can sent output back to the program with a(n)
# a) return *
# b) print
# c) assignment
# d) SASE

# 4. Formal and actual parameters are matched up by 
# a) name
# b) position *
# c) ID
# d) interests

# 5. Which os the following is NOT a step in the function calling process
# a) The calling program suspends
# b) The formal parameters are assigned the value of the actual parameters
# c) The body of the function executes
# d) Control returns to the point just before the fucntion was called *

# 6. In Python actual parameters are passed to functions
# a) by value *
# b) by reference
# c) at random
# d) by networking

# 7. Which is the following is not a reason to use functions
# a) to reduce code deuplication
# b) to make a program more modular
# c) to make a program more self documenting
# d) to demonstrate intellectual superiority *

# 8. If a function returns a value, it should generally be called from
# a) an expression *
# b) a different program
# c) main
# d) a cell phone

# 9. A function with a no return statement returns
# a) nothing
# b) its parameters
# c) its variables
# d) None

Discussion

# Q1. In your own words, describe two motivations for defining functions in your programs
#
# A1. Functions are useful for reducing duplicate code within a script. Using functions can make a script more modular making it easier to read and manipulate
#
# Q2. We have been thinking about computer programs as sequences of instructions where the computer methodically executes one instruction and then moves on to the next
      one. Do programs that contain functions fit this model.
#
# A2. In a sense a script always travels downwards, it just uses references to functions listed as it moves through the scripts so it may look like it is going backwards 
      and forwards but in fact, it is just referring to a pre created command. A bit like a journey where you keep going forwards, you just refer to the map every now 
      and again
