# "Python Programming: An Introduction to Computer Science"
# by John Zelle, 3rd Ed.
# Chapter 3: Computing with Numbers
#
# Review questions
#
# Q1. Information that is stored and manipulated by computers is called data
# TRUE
#
# Q2. Since floating point numbers are extremely accurate, they should generally be used instead of ints
# FALSE. Using a float allows us to represent a much larger range of values but the amount of precision is still fixed. A computer stores floating point numbers as a pair of fixed
# length binary integers. One integer represents the string of digits in the value and is called the mantissa. The second integerkeeps track of where the whole part ends and where
# the fractinal part begins. Since the underlying numbers are binary, only fractions that involve powers of 2 can be represented exactly, any other fraction produces an infintely
# repeating mantissa. when an infinitely long mantissa is truncated to a fixed length for storage, the result is a close approximation
#
# Q3. Operations like addition and subtraction are defined in the math library
# FALSE
#
# Q4. The number of possible arrangments of n items is equal to n!
# TRUE. Page 68. In mathematics, factorials are often denoted with an exclamation point (!)
#
# Q5. The sqrt function computes the squirt of a number.
# FALSE. It computes the square root of an input value
#
# Q6. The float data type is identical to the mathematical concept of a real number 
# FALSE
#
# Q7. Computers represent numbers using base 2 (binary) representations
# TRUE
#
# Q8. A hardware float can represent a larger range of values than a hardware int
# TRUE. Using a float allows us to represent a much larger range of values but the amount of precision is still fixed
#
# Q9. Type conversion functions such as float are a safe alternative to eval for getting user input
# TRUE
#
# Q10. In Python, 4+5 is the same as 4.0+5.0
# FALSE. 4+5 = 9 and 4.0+5.0 = 9.0
#
# Multiple choice
#
# Q1. which of the following is not a built in Python data type
# a) int
# b) float
# c) rational *
# d) string
#
# Q2. Which of the following is not a built in operation?
# a) +
# b) %
# c) abs()
# d) sqrt() *
#
# Q3. In order to use functions in the math library, a program must include a 
# a) a comment
# b) a loop
# c) an operator
# d) an import statement *
#
# Q4. The value of 4! is
# a) 9
# b) 24 *
# c) 41
# d) 120
# A factorial is a function that multiplies a number by every number below it. For example 4!= 4*3*2*1=24
#
# Q5. The most appropriate data type for sorting the value of pi is
# a) int
# b) float *
# c) irrational
# d) string 
#
# Q6. The number of distint values that can be represented using 5 bits is 
# a) 5
# b) 10
# c) 32 *
# d) 50
# 2^5 = 32
#
# Q7. In a mixed type expression involving ints and floats, Python will convert 
# a) floats to ints
# b) ints to strings
# c) both floats and ints to strings 
# d) ints to floats *
#
# Q8. Which of the following is not a Python type conversion function?
# a) float
# b) round
# c) int
# d) abs *
#
# Q9. The pattern used to compute factorials is
# a) accumulator *
# b) input, process, output
# c) counted loop
# d) plaid *
#
# Q10. In modern Pythin, an int value that grows larger than the underlying hardware int
# a) causes an overflow
# b) converts to float
# c) breaks the computer
# d) uses more memory *
#
# Discussion Questions
#
# Q1. Show the result of evaluating each expression. Be sure that the value is in the proper form to indicate its type (int or float). If the expression is illegal, explain why.
#
# Q1a) 4.0 / 10.0 + 3.5 * 2 = 7.4
# Q1b) 10 % 4 + 6 / 2 = 5
# Q1c) abs(4 - 20) // 3) ** 3 = 8
# Q1d) sqrt(4.5 - 5.0) + 7 * 3 = illegal because sqrt cannot handle negative numbers
# Q1e) 3 * 10 // 3 + 10 % 3 = 10 (10 // 3) = 3 and (10 % 3) = 1 so 3 x 3 + 1
# Q1f) 3 ** 3 = 27
#
# Q2. Translate each of the following mathematical expressions into an equivalent Python expression. You may assume that the math library has been imported (via import math).
#
# Q2a) (3 + 4) * 5
# Q2b) (n(n-1) / 2          
# Q2c) 4 * math.pi * r**2                       
# Q2d) math.sqrt(r * math.cos(a)**2 + r * math.sin(b)**2)
# Q2e) (y2 - y1) / (x2 - x1)
#
# Q3. Show the seqeunce of numbers that would be generated by each of the folloiwng range expressions
#
# Q3a) range(5) = [0, 1, 2, 3, 4]
# Q3b) range(3,5) = [3, 4]
# Q3c) range(4,13,3) = [4, 7, 10]
# Q3d) range(15,5,-2) = [15, 13, 11, 9, 7]
# Q3e) range(5,3) = []
#
# Q4. Show the output that would be generated by each of the following program fragments
# Q4a.
for i in range(1,11):
    print(i*i)
1
4
9
16
25
36
49
64
81
100
# Q4b.
for i in [1,3,5,7,9]:
    print(i, ":", i**3)
    print(i)
1 : 1
1
3 : 27
3
5 : 125
5
7 : 343
7
9 : 729
9
#
# Q4c
x = 2
y = 10
for j in range(0, y, x):
    print(j, end="") #https://www.geeksforgeeks.org/gfact-50-python-end-parameter-in-print/
    print(x + y)
print("done")
012
212
412
612
812
done
#
# Q4d 
ans = 0
for i in range(1,11):
    ans = ans + i*i
    print(i)
print(ans)
1
2
3
4
5
6
7
8
9
10
385
#
# Q5. What do you think will happen if you use a negative number as the second parameter in the round function? For example, what should be the result of round(314.159265, -1)? 
#     Explain the rational for your answer. After you've written your answer, consult the Python documentation or try out some examples to see what Python actually does in this 
#     case
print(round(314.159265, -1))
310
#
# A5. It rounded the value up to the nearest 10- https://www.pythontutorial.net/advanced-python/python-rounding/
#
# Q6.  What do you think will happen when the operands to the integer division or remainder operations are negative? Consider each of the following cases and try to predict the
#      results. Then try them out in Python. Hint: Recall the magic formula a = (a//b)(b) + (a%b).
#
# Q6a) -10 // 3 = -4
# Q6b) -10 % 3 = 2
# Q6c) 10 // -3 = -4
# Q6d) 10 % -3 = -2
# Q6e) -10 // -3 = 3
#
# Example explanation - For -6 // 4, first the result of -6 / 4 is calculated, so -1.5. Flooring then moves to the lower integer value, so -2.
# https://www.pythontutorial.net/advanced-python/python-floor-division/
#
# Programming Exercises
#
# Q1. Write a program to calculate the volume and surface area of a sphere fro its radius, given as input. Here are some formulas that might be useful
# V = 4/3πr^3
# A = 4πr^2
#
#This program will calculate the volume and surface area of a sphere from it's radius
import math
def main():
    print("This is a program to calculate the volume and surface area of a sphere from it's radius")
    radius =(eval(input("What is the radius? ")))
    volume = round((4 / 3) * 3.142 *(radius ** 3),2)
    area = round(4 * 3.142 * (radius * radius),2)
    print("The volume of the sphere is", volume)
    print("The surface area of sphere is", area)
main()
#
# Q2. Write a program that calculates the cost per square inch of a cirular pizza, given its diameter and price. The formula for area is A = πr^2
#
#This program will calculate the cost per square inch of a pizza given its diameter and price
def main():
    print("This program will calculate the cost per square inch of a pizza given its diameter and price")
    diameter = eval(input("What is the diameter of the pizza? "))
    cost = eval(input("What is the cost of the pizza? "))
    radius = diameter / 2
    area = round(3.142 * (radius * radius),2)
    print("The cost per square inch of the pizza is", round((cost/area), 2))
main()
#
# Q3. Write a program that computes the molecular weight of a carbohydrate (in grams per mole) based on the number of hydrogen, carbon, and
#     oxygen atoms in the molecule. The program should prompt the user to enter the number of hydrogen atomes, the number of carbon atoms,
#     and the number of oxygen atoms. The program then prints the total combined molecular weight of all the atoms based on these individual
#     atom weights:
#     Atom      Weight
#            (grams/mole)
#     ______________________
#      H         1.00894
#      C         12.0107
#      O         15.9994
#     For example, the molecular weight of water (H20) is 2(1.00794) + 15.9994 = 18.01528.
#
# A program to calculate the molecular weight of a carbohydrate (in grams per mole based on the number of hydrogen, carbon and oxygen atoms in the molecule
# Prompt the user to input the numbers of hydrogen, carbon and oxygen atoms
#
def main():
    hydrogen = eval(input("How many hydrogen atoms are there? "))
    carbon = eval(input("How many carbon atoms are there? "))
    oxygen = eval(input("How many oxygen atoms are there? "))

    weight = round((hydrogen * 1.00794) + (carbon * 12.0107) + (oxygen * 15.9994),2)
    print("The molecular weight of the carbohydrate is", weight, "grams/mole")

main()
#  Q4. Write a program that determines the distance to a lightning strike based on the time elapsed between the flash and the sound of thunder.
#      The speed of sound is approximately 1100 ft/sec and 1 mile is 5280 ft.
#
# A program which determines the distance to a lightning strike based on the time elapsed between the flash and sound of thunder

# Speed of sound is 1100ft/s
# 1 mile is 5280ft
# distance = speed x time

def main():
    time = eval(input("Please input the time in seconds between the flash and sound of thunder: "))
    distance = round((time * 1100) /5280, 2)
    print("The distance to a lightning strike is", distance, "miles away")

main()
#
#  Q5. The Konidtorei coffee shop sells coffee at $10.50 a pound plus the cost of shipping. Each order ships for $.086 per pound + $1.50 fixed cost
#      for overhead. Write a program that calculates the cost of an order
#
# Program to calculate the cost of a coffee order
def main():
    coffee = eval(input("How many pounds of coffee would you like? "))
    coffeecost = coffee * 0.86
    overhead = 1.50
    total = coffeecost + overhead
    print("The total cost of the coffee is",total)

main()
#
#  Q6. Two points in a plane are specified using the coordinates (x1,y1) and (x2,y2). Write a program that calculates the slope of a line through
#      two (non-vertical) points entered by the user.
#      slope = (y2 - y1) / (x2 - x1
#
def main():
    print("This program calculates the slope of a line through 2 points.")
    print()
    ptx1, pty1 = eval(input("Input the first x and y point separated by a comma "))
    ptx2, pty2 = eval(input("Input the second x and y point separated by a comma "))
    slopey = pty2 - pty1
    slopex = ptx2 - ptx1

    print("The slope is", slopey, '/', slopex)

main()
#
#  Q7. Write a program that accepts two points (see previous problem) and determins the distance between them.
#      distances = sqrt((x2-x1)^2 + (y2-y1)^2)
#
# A program to calculate the distance between 2 points
# distance = square root of (x2-x1) squared + (y2-y1) squared
#
def main():
    v1 = eval(input("Please enter a value for x1: "))
    v2 = eval(input("Please enter a value for x2: "))
    y1 = eval(input("Please enter a value for y1: "))
    y2 = eval(input("Please enter a value for y2: "))      
    distance = math.sqrt(((v2-v2)**2) + ((y2-y1)**2))
    print(distance)

main()
#
#  Q8. The Gregorian epact is the number of days between Janaury 1st and the previous new moon. This value is used to figure out the date of Easter.
#      It is calculated by these formulas (using int arithmetic):
#      C = year//100
#      epact = (8 + (C//4) - C + ((8C + 13)//25) + 11(year%19))%30
#
#This program prompts the user for a 4 digit year and then outputs the value of the epact
#
def main():
    year = eval(input("Please enter a 4 digit year: "))
    c = year//100
    epact =(8 + (c//4) - c + ((8*c +13)//25) + 11*(year%19))%30
    print("The number of days between January 1st and the previous new moon is", epact)

main()
#
#  Q9. Write a program to calculate the area of a triangle given the length of its three sides--a, b, and c--using these formulas:
#      s = (a + b + c) / 2
#      A = sqrt(s(s - a)(s - b)(s - c))
#
#Write a program to calculate the area of a triangle given the length of its 3 sides
import math
def main():
    a = eval(input("Please enter a length for side a: "))
    b = eval(input("Please enter a length for side b: "))
    c = eval(input("Please enter a length for side c: "))
    s = (a + b + c) / 2
    a = math.sqrt(s * ((s-a) * (s-b) *(s-c)))
    print("The area of a triangle is", a)

main()
#
# 10. Write a program to determine the length of a ladder required to reach a given height when leaned against a house. The height and angle of the
#     ladder are given as inputs. To compute length use:
#     length = height / sin angle
#     Note: The angle must be in radians. Prompt for an angle in degrees and use this formula to convert:
#     radians = (pi / 180) degrees
#
# A program to determine the length of a ladder required to reach a given height when leaned against a house
import math
def main():
    height = eval(input("Please input the height: "))
    angle = eval(input("Please enter the angle of the ladder: "))
    rad = (math.pi/180) * angle
    length = round(height / (math.sin(rad)), 2)
    print("The length of a ladder required is", length)

main()
#
# Q11. Write a program to find the sum of the first n natural numbers where the value of n is provided by the user

def main():
    print("This program finds the sum of the first 'n' natural numbers")
    print("starting with 0")
    n = eval(input("Enter any natural number "))
    add = 0
    for i in range (n):
        add = add + i
    print(add)
main()
